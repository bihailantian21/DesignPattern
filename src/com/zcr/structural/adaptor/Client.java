package com.zcr.structural.adaptor;

/**
 * @author zcr
 * @date 2019/7/13-19:16
 *
 *结构型模式：
 * 核心作用：是从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。
 *
 * 什么是适配器模式?
 * 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。
 *
 * 模式中的角色
 * 目标接口（Target）：客户所期待的接口。目标可以是具体的或抽象的类，也可以是接口。 电脑的usb接口
 * 需要适配的类（Adaptee）：需要适配的类或适配者类。 键盘
 * 适配器（Adapter）：通过包装一个需要适配的对象，把原接口转换成目标接口。　 转接头
 *
 * Adaptee->Adapter->Target->Client
 * Key->Adapter->Usb->Client
 *
 *
 *
 *
 *
 *工作中的场景
 * 经常用来做旧系统改造和升级
 * 如果我们的系统开发之后再也不需要维护，那么很多模式都是没必要的，但是不幸的是，事实却是维护一个系统的代价往往是开发一个系统的数倍。
 *
 * 我们学习中见过的场景
 * java.io.InputStreamReader(InputStream)
 * java.io.OutputStreamWriter(OutputStream
 *
 *
 *
 * 结构型模型汇总
 * 代理模式 为真实对象提供一个代理，从而控制对真实对象的访问
 * 适配器模式 使原本由于接口不兼容不能一起工作的类可以一起工作
 * 桥接模式 处理多层继承结构，处理多维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立的扩展在抽象层建立关联
 *
 * 组合模式 将对象组合成树状结构以表示”部分和整体“层次结构，使得客户可以统一的调用叶子对象和容器对象
 * 装饰模式 动态地给一个对象添加额外的功能，比继承灵活
 * 外观模式 为子系统提供统一的调用接口，使得子系统更加容易使用
 * 享元模式 运用共享技术有效的实现管理大量细粒度对象，节省内存
 *
 *
 */
public class Client {

    public static void main(String[] args) {

        //类适配器（适配器继承需要适配的类在实现的方法中调用父类的操作方法、实现目标接口实现方法）
        Key key = new Key();
        Usb usb = new Adaptor();
        usb.UseKey();

        //适配器模式：对象适配器（实现目标接口、将需要适配的类作为属性通过构造器传递）
        //桥接模式：实现电脑类、将品牌类作为属性通过构造器传递
        //对象适配器（适配器实现目标接口重写方法中调用需要适配类的操作方法、将需要适配的类作为属性通过构造器传递需要适配的类）
        Key key1 = new Key();
        Usb usb1 = new Adaptor2(key1);
        usb1.UseKey();


    }
}
