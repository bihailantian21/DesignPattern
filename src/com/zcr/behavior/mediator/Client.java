package com.zcr.behavior.mediator;

import java.io.FileOutputStream;

/**
 * @author zcr
 * @date 2019/7/14-19:02
 *
 *中介者模式 Mediator
 * 场景(中介大家熟悉吗?房产中介?)
 * 假如没有总经理。下面三个部门：财务部、市场部、研发部。财务部要发工资，让大家核对公司需要跟市场部和研发部都通气；市场部要接个新项目，需要研发部处理技术、需要财务部出资金。市场部跟各个部门打交道。 虽然只有三个部门，但是关系非常乱。
 * 实际上，公司都有总经理。各个部门有什么事情都通报到总经理这里，总经理再通知各个相关部门。
 * 这就是一个典型的“中介者模式”总经理起到一个中介、协调的作用
 *
 * 核心
 * 如果一个系统中对象之间的联系呈现为网状结构，对象之间存在大量多对多关系，将导致关系及其复杂，这些对象称为“同事对象”
 * 我们可以引入一个中介者对象，使各个同事对象只跟中介者对象打交道，将复杂的网络结构化解为如下的星形结构。
 *
 *
 * 部门接口：研发部、财务部、市场部
 * 方法：自己部门的动作、它向外提供的动作
 * 每个部门都持有一个对总经理的引用
 *
 * 总经理：中介者类
 * 方法：建立关联、发送命令
 *
 *
 *
 *
 * 抽象中介类：接口，方法：建立关联、发送命令
 * 具体中介类：实现抽象接口类，实现各个方法。创建一个map，用于存储有多少个部门。建立关联就是把这个放进map中，发送命令就是调用某个部门的对外方法。
 * 抽象部门类：接口，方法：自己部门的动作、它向外提供的动作
 * 具体部门类：实现抽象部门类，实现各个方法。每个部门都持有一个对总经理的引用，把中介类作为属性，通过构造器传递参数进来中介类【同时调用中介类的关联方法与本部门进行关联】。
 * 在部门这个设置中介的引用，同时在中介这里注册，让他们互相可以找到。并且可以在实现方法中使用这个中介去调用别的部门的对外方法！
 *
 *
 * 中介者模式的本质：
 * 解耦多个同事对象之间的交互关系。每个对象都持有中介者对象的引用，只跟中介者对象打交道。我们通过中介者对象统一管理这些交互关系
 *
 * 开发中常见的场景：
 * MVC模式(其中的C，控制器就是一个中介者对象。M和V都和他打交道)
 * 窗口游戏程序，窗口软件开发中窗口对象也是一个中介者对象
 * 图形界面开发GUI中，多个组件之间的交互，可以通过引入一个中介者对象来解决，可以是整体的窗口对象或者DOM对象
 * Java.lang.reflect.Method#invoke()
 *
 */
public class Client {

    public static void main(String[] args) {

        AbstractMediator mediator = new PresidentMediator();

        MarketDepartment marketDepartment = new MarketDepartment(mediator);
        FinacialDepartment finacialDepartment = new FinacialDepartment(mediator);

        marketDepartment.selfAction();
        marketDepartment.outAction();


    }
}
